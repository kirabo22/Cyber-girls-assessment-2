name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  # Build and Security Scanning
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Docker Linting and Security Scan (Hadolint)
      - name: Lint Dockerfile
        run: docker run --rm -i hadolint/hadolint hadolint --ignore DL3008 - < Dockerfile

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

        
      # Build and Push Docker image
      - name: Build and Push Docker image
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}"/flask-app:latest .
          docker push "${{ secrets.DOCKER_USERNAME }}"/flask-app:latest

      # Vulnerability Scanning with Trivy
      # Vulnerability Scanning with Trivy
      - name: Docker Image Security Scan with Trivy
        run: |
            docker pull aquasec/trivy:latest
            docker run --rm \
              -v /var/run/docker.sock:/var/run/docker.sock \
              aquasec/trivy:latest \
              image "${{ secrets.DOCKER_USERNAME }}/flask-app:latest"


  # Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

   

    #  use Trivy to scan the Docker image for vulnerabilities
    - name: Install Trivy
      run: |
          sudo apt-get install -y wget apt-transport-https gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

    - name: Docker Image Security Scan with Trivy
      run: |
          trivy image "${{ secrets.DOCKER_USERNAME }}/flask-app:latest"

    # Check for Kubernetes Best Practices using kube-linter
    - name: Run kube-linter for Kubernetes YAML checks
      run: |
        docker run --rm -v $(pwd):/workspace stackrox/kube-linter:latest lint /workspace/deployment.yaml /workspace/service.yaml


        
     # Set up Kind Kubernetes Cluster
    - name: Deploy to Kind Kubernetes Cluster
      run: |
       kind create cluster
       kubectl apply -f deployment.yaml
       kubectl apply -f service.yaml

